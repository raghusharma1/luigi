# ********RoostGPT********
"""
Test generated by RoostGPT for test pythonBigProjectTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=getintdict_fed097f72d
ROOST_METHOD_SIG_HASH=getintdict_8dcd8d4d77


Scenario 1: Test with a section containing integer values
Details:
  TestName: test_getintdict_with_integer_values
  Description: This test verifies whether the function correctly parses the section and returns a dictionary with integer values.
Execution:
  Arrange: Initialize a ConfigParser object with a section containing key-value pairs where the values are integers and the keys are not in the 'DEFAULT' section.
  Act: Call the getintdict function with the section name.
  Assert: Check if the returned dictionary correctly maps the keys to the corresponding integer values.
Validation:
  This test is crucial to ensure that the function correctly interprets integer values from the configuration, which is a fundamental aspect of its intended operation.

Scenario 2: Test with a section containing non-integer values
Details:
  TestName: test_getintdict_with_non_integer_values
  Description: This test verifies that the function correctly handles sections with non-integer values, excluding them from the returned dictionary.
Execution:
  Arrange: Initialize a ConfigParser object with a section containing key-value pairs where the values are not integers and the keys are not in the 'DEFAULT' section.
  Act: Call the getintdict function with the section name.
  Assert: Check if the returned dictionary is empty, demonstrating that non-integer values are excluded.
Validation:
  This test is important to confirm that the function correctly handles non-integer values, which could potentially cause errors if not properly excluded.

Scenario 3: Test with a non-existent section
Details:
  TestName: test_getintdict_with_non_existent_section
  Description: This test verifies that the function correctly handles the case where the specified section does not exist in the configuration.
Execution:
  Arrange: Initialize a ConfigParser object without the section to be queried.
  Act: Call the getintdict function with the name of the non-existent section.
  Assert: Check if the returned dictionary is empty, indicating that the function correctly handles non-existent sections.
Validation:
  This test is necessary to ensure that the function gracefully handles the case where the specified section does not exist, which is a vital aspect of its robustness and error handling.

Scenario 4: Test with a section containing keys from the 'DEFAULT' section
Details:
  TestName: test_getintdict_with_default_keys
  Description: This test verifies that the function correctly excludes keys from the 'DEFAULT' section.
Execution:
  Arrange: Initialize a ConfigParser object with a section containing key-value pairs where the keys are also present in the 'DEFAULT' section.
  Act: Call the getintdict function with the section name.
  Assert: Check if the returned dictionary does not contain the keys from the 'DEFAULT' section.
Validation:
  This test is important to ensure that the function correctly excludes keys from the 'DEFAULT' section, which is a key part of its intended operation.
"""

# ********RoostGPT********
import os
import re
import warnings
from configparser import ConfigParser, NoOptionError, NoSectionError, InterpolationError
from configparser import Interpolation, BasicInterpolation
from base_parser import BaseParser
import pytest
from cfg_parser import LuigiConfigParser

class Test_LuigiConfigParserGetintdict:

    @pytest.mark.regression
    def test_getintdict_with_integer_values(self):
        # Arrange
        config = LuigiConfigParser(BasicInterpolation())
        config.read_string("""
        [test_section]
        key1 = 1
        key2 = 2
        key3 = 3
        """)
        expected_dict = {'key1': 1, 'key2': 2, 'key3': 3}

        # Act
        result_dict = config.getintdict('test_section')

        # Assert
        assert result_dict == expected_dict

    @pytest.mark.regression
    def test_getintdict_with_non_integer_values(self):
        # Arrange
        config = LuigiConfigParser(BasicInterpolation())
        config.read_string("""
        [test_section]
        key1 = value1
        key2 = value2
        key3 = value3
        """)

        # Act
        result_dict = config.getintdict('test_section')

        # Assert
        assert result_dict == {}

    @pytest.mark.regression
    def test_getintdict_with_non_existent_section(self):
        # Arrange
        config = LuigiConfigParser(BasicInterpolation())
        config.read_string("""
        [test_section]
        key1 = 1
        key2 = 2
        key3 = 3
        """)

        # Act
        result_dict = config.getintdict('non_existent_section')

        # Assert
        assert result_dict == {}

    @pytest.mark.regression
    def test_getintdict_with_default_keys(self):
        # Arrange
        config = LuigiConfigParser(BasicInterpolation())
        config.read_string("""
        [DEFAULT]
        key1 = 1
        key2 = 2
        key3 = 3

        [test_section]
        key1 = 4
        key2 = 5
        key3 = 6
        """)

        # Act
        result_dict = config.getintdict('test_section')

        # Assert
        assert result_dict == {}
