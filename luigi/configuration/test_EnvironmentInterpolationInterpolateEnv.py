# ********RoostGPT********
"""
Test generated by RoostGPT for test pythonBigProjectTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=_interpolate_env_ea5eb159c9
ROOST_METHOD_SIG_HASH=_interpolate_env_9d7c1514cf


Scenario 1: Testing Successful Interpolation with Existing Environment Variables
Details:
  TestName: test_interpolation_existing_envvar
  Description: This test is intended to verify that the _interpolate_env function successfully interpolates a string containing environment variables that exist.
Execution:
  Arrange: Initialize a ConfigParser object with a dictionary containing a key-value pair where the value is a string containing an environment variable. Also, set the environment variable used in the setup.
  Act: Call the _interpolate_env function with the key-value pair as parameters.
  Assert: The expected outcome is that the function will return a string with the environment variable replaced by its value.
Validation:
  This test is important to ensure that the function correctly handles the interpolation of environment variables in the given string. The result is connected to the function's specifications, as it should replace the environment variable with its value.

Scenario 2: Testing Interpolation with Non-Existing Environment Variables
Details:
  TestName: test_interpolation_non_existing_envvar
  Description: This test is intended to verify that the _interpolate_env function raises an InterpolationMissingEnvvarError when the string contains a non-existing environment variable.
Execution:
  Arrange: Initialize a ConfigParser object with a dictionary containing a key-value pair where the value is a string containing a non-existing environment variable.
  Act: Call the _interpolate_env function with the key-value pair as parameters.
  Assert: The expected outcome is that the function will raise an InterpolationMissingEnvvarError.
Validation:
  This test is important to ensure that the function raises an error when it encounters a non-existing environment variable. The expected result is in line with the function's specifications and business requirements, as it should raise an error in such scenarios.

Scenario 3: Testing Interpolation with Multiple Environment Variables
Details:
  TestName: test_interpolation_multiple_envvar
  Description: This test is intended to verify that the _interpolate_env function correctly interpolates a string containing multiple environment variables.
Execution:
  Arrange: Initialize a ConfigParser object with a dictionary containing a key-value pair where the value is a string containing multiple environment variables. Also, set the environment variables used in the setup.
  Act: Call the _interpolate_env function with the key-value pair as parameters.
  Assert: The expected outcome is that the function will return a string with all the environment variables replaced by their values.
Validation:
  This test is important to ensure that the function correctly handles the interpolation of multiple environment variables in the given string. The result is connected to the function's specifications, as it should replace each environment variable with its respective value.

Scenario 4: Testing Interpolation with No Environment Variables
Details:
  TestName: test_interpolation_no_envvar
  Description: This test is intended to verify that the _interpolate_env function returns the original string when it contains no environment variables.
Execution:
  Arrange: Initialize a ConfigParser object with a dictionary containing a key-value pair where the value is a string containing no environment variables.
  Act: Call the _interpolate_env function with the key-value pair as parameters.
  Assert: The expected outcome is that the function will return the original string.
Validation:
  This test is important to ensure that the function correctly handles strings that do not contain any environment variables. The expected result is in line with the function's specifications and business requirements, as it should return the original string in such scenarios.
"""

# ********RoostGPT********
import os
import pytest
from configparser import ConfigParser, InterpolationMissingEnvvarError
from configuration.cfg_parser import EnvironmentInterpolation._interpolate_env

class Test_EnvironmentInterpolationInterpolateEnv:
    
    @pytest.mark.positive
    def test_interpolation_existing_envvar(self):
        # Arrange
        os.environ["TEST_VAR"] = "test_value"
        config = ConfigParser()
        config.read_dict({"DEFAULT": {"key": "${TEST_VAR}"}})
        env_interpolation = EnvironmentInterpolation(config._interpolations)

        # Act
        result = env_interpolation._interpolate_env("key", "DEFAULT", "${TEST_VAR}")

        # Assert
        assert result == "test_value"

    @pytest.mark.negative
    def test_interpolation_non_existing_envvar(self):
        # Arrange
        config = ConfigParser()
        config.read_dict({"DEFAULT": {"key": "${NON_EXISTING_VAR}"}})
        env_interpolation = EnvironmentInterpolation(config._interpolations)

        # Act & Assert
        with pytest.raises(InterpolationMissingEnvvarError):
            env_interpolation._interpolate_env("key", "DEFAULT", "${NON_EXISTING_VAR}")

    @pytest.mark.positive
    def test_interpolation_multiple_envvar(self):
        # Arrange
        os.environ["TEST_VAR1"] = "test_value1"
        os.environ["TEST_VAR2"] = "test_value2"
        config = ConfigParser()
        config.read_dict({"DEFAULT": {"key": "${TEST_VAR1}${TEST_VAR2}"}})
        env_interpolation = EnvironmentInterpolation(config._interpolations)

        # Act
        result = env_interpolation._interpolate_env("key", "DEFAULT", "${TEST_VAR1}${TEST_VAR2}")

        # Assert
        assert result == "test_value1test_value2"

    @pytest.mark.positive
    def test_interpolation_no_envvar(self):
        # Arrange
        config = ConfigParser()
        config.read_dict({"DEFAULT": {"key": "test_string"}})
        env_interpolation = EnvironmentInterpolation(config._interpolations)

        # Act
        result = env_interpolation._interpolate_env("key", "DEFAULT", "test_string")

        # Assert
        assert result == "test_string"
